;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.8a Evaluation
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/18/2008
;Author  : Freeware, for evaluation and non-commercial use only
;Company :
;Comments:
;
;
;Chip type           : ATmega16
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001D #endasm
;#include <lcd.h>
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0xC0
;
;void show(unsigned int val,unsigned char xx, unsigned char yy)
; 0000 0025 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0026  unsigned char a,b,c;
; 0000 0027  lcd_gotoxy(xx,yy);
;PCODE: $00000012 VOL: 0
;	val -> Y+6
;	xx -> Y+5
;	yy -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0028  a=(val%10)+48;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0029  val/=10;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002A  b=(val%10)+48;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002B  val/=10;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002C  c=(val%10)+48;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002D // val/=10;
; 0000 002E // d=(val%10)+48;
; 0000 002F // lcd_putchar(d);
; 0000 0030  lcd_putchar(c);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0031  lcd_putchar(b);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0032  lcd_putchar(a);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0033 
; 0000 0034 }
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0038 {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0039 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003A // Delay needed for the stabilization of the ADC input voltage
; 0000 003B delay_us(10);
;PCODE: $0000003E VOL: 0
; 0000 003C // Start the AD conversion
; 0000 003D ADCSRA|=0x40;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003E // Wait for the AD conversion to complete
; 0000 003F while ((ADCSRA & 0x10)==0);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0040 ADCSRA|=0x10;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0041 return ADCW;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0042 }
;PCODE: $0000004C VOL: 0
;unsigned int read(unsigned char channel)
; 0000 0044 {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0045  unsigned int z;
; 0000 0046  unsigned char i;
; 0000 0047  z=0;
;PCODE: $0000004F VOL: 0
;	channel -> Y+4
;	z -> R16,R17
;	i -> R19
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0048  for(i=0;i<8;i++)z+=read_adc(channel);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0049 z/=8;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 004A  return z;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 004B }
;PCODE: $0000006C VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0050 {
;PCODE: $0000006D VOL: 0
; 0000 0051 // Declare your local variables here
; 0000 0052 
; 0000 0053 // Input/Output Ports initialization
; 0000 0054 // Port A initialization
; 0000 0055 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0056 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0057 PORTA=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0058 DDRA=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0059 
; 0000 005A // Port B initialization
; 0000 005B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005D PORTB=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 005E DDRB=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 005F 
; 0000 0060 // Port C initialization
; 0000 0061 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0062 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0063 PORTC=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0064 DDRC=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0065 
; 0000 0066 // Port D initialization
; 0000 0067 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0068 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0069 PORTD=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 006A DDRD=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 006B 
; 0000 006C // Timer/Counter 0 initialization
; 0000 006D // Clock source: System Clock
; 0000 006E // Clock value: Timer 0 Stopped
; 0000 006F // Mode: Normal top=FFh
; 0000 0070 // OC0 output: Disconnected
; 0000 0071 TCCR0=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0072 TCNT0=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0073 OCR0=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0074 
; 0000 0075 // Timer/Counter 1 initialization
; 0000 0076 // Clock source: System Clock
; 0000 0077 // Clock value: Timer 1 Stopped
; 0000 0078 // Mode: Normal top=FFFFh
; 0000 0079 // OC1A output: Discon.
; 0000 007A // OC1B output: Discon.
; 0000 007B // Noise Canceler: Off
; 0000 007C // Input Capture on Falling Edge
; 0000 007D // Timer 1 Overflow Interrupt: Off
; 0000 007E // Input Capture Interrupt: Off
; 0000 007F // Compare A Match Interrupt: Off
; 0000 0080 // Compare B Match Interrupt: Off
; 0000 0081 TCCR1A=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0082 TCCR1B=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0083 TCNT1H=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0084 TCNT1L=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0085 ICR1H=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0086 ICR1L=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0087 OCR1AH=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0088 OCR1AL=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0089 OCR1BH=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008A OCR1BL=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 008B 
; 0000 008C // Timer/Counter 2 initialization
; 0000 008D // Clock source: System Clock
; 0000 008E // Clock value: Timer 2 Stopped
; 0000 008F // Mode: Normal top=FFh
; 0000 0090 // OC2 output: Disconnected
; 0000 0091 ASSR=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0092 TCCR2=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0093 TCNT2=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0094 OCR2=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0095 
; 0000 0096 // External Interrupt(s) initialization
; 0000 0097 // INT0: Off
; 0000 0098 // INT1: Off
; 0000 0099 // INT2: Off
; 0000 009A MCUCR=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 009B MCUCSR=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 009C 
; 0000 009D // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 009E TIMSK=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 009F 
; 0000 00A0 // Analog Comparator initialization
; 0000 00A1 // Analog Comparator: Off
; 0000 00A2 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00A3 ACSR=0x80;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00A4 SFIOR=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A5 
; 0000 00A6 // ADC initialization
; 0000 00A7 // ADC Clock frequency: 125.000 kHz
; 0000 00A8 // ADC Voltage Reference: Int., cap. on AREF
; 0000 00A9 // ADC Auto Trigger Source: None
; 0000 00AA ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00AB ADCSRA=0x87;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00AC 
; 0000 00AD // LCD module initialization
; 0000 00AE lcd_init(16);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00AF 
; 0000 00B0 while (1)
;PCODE: $000000B1 VOL: 0
; 0000 00B1       {
; 0000 00B2       // Place your code here
; 0000 00B3       show(read(0),9,1);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00B4       show(read(1),4,1);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B5       show(read(2),4,0);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00B6       show(read(3),0,0);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00B7       show(read(4),13,0);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00B8       show(read(5),9,0);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B9       delay_ms(10);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00BA       };
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00BB }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
