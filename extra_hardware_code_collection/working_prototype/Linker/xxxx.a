;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.8a Evaluation
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/18/2009
;Author  : Freeware, for evaluation and non-commercial use only
;Company :
;Comments:
;
;
;Chip type           : ATmega32
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;unsigned char step[4]={0xCC,0x66,0x33,0x99};

	.DSEG
;unsigned char l_overflow,r_overflow,l_step,r_step,x,y,z;
;
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 001F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0020 // Place your code here
; 0000 0021 r_overflow++;
;PCODE: $0000000F VOL: 0
; 0000 0022 if(r_overflow > 1)
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0023 {
; 0000 0024 r_overflow=0;
;PCODE: $00000013 VOL: 0
; 0000 0025 PORTB=step[r_step];
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0026 PORTC.0=~PINC.0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0027 r_step++;
;PCODE: $00000023 VOL: 0
; 0000 0028 if(r_step>3)r_step=0;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0029 }
;PCODE: $00000028 VOL: 0
; 0000 002A 
; 0000 002B }
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;
;// Timer 2 output compare interrupt service routine
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
; 0000 002F {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0030 // Place your code here
; 0000 0031 
; 0000 0032 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0037 {
;PCODE: $00000032 VOL: 0
; 0000 0038 // Declare your local variables here
; 0000 0039 
; 0000 003A // Input/Output Ports initialization
; 0000 003B // Port A initialization
; 0000 003C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003E PORTA=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003F DDRA=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0040 
; 0000 0041 // Port B initialization
; 0000 0042 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0043 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 0044 PORTB=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0045 DDRB=0x0F;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0046 
; 0000 0047 // Port C initialization
; 0000 0048 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
; 0000 0049 // State7=T State6=T State5=T State4=T State3=T State2=1 State1=1 State0=1
; 0000 004A PORTC=0x07;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 004B DDRC=0x07;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004C 
; 0000 004D // Port D initialization
; 0000 004E // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 004F // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 0050 PORTD=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0051 DDRD=0xF0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0052 
; 0000 0053 // Timer/Counter 0 initialization
; 0000 0054 // Clock source: System Clock
; 0000 0055 // Clock value: 15.625 kHz
; 0000 0056 // Mode: CTC top=OCR0
; 0000 0057 // OC0 output: Disconnected
; 0000 0058 TCCR0=0x0D;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0059 TCNT0=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 005A OCR0=0x64;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005B 
; 0000 005C // Timer/Counter 1 initialization
; 0000 005D // Clock source: System Clock
; 0000 005E // Clock value: Timer 1 Stopped
; 0000 005F // Mode: Normal top=FFFFh
; 0000 0060 // OC1A output: Discon.
; 0000 0061 // OC1B output: Discon.
; 0000 0062 // Noise Canceler: Off
; 0000 0063 // Input Capture on Falling Edge
; 0000 0064 // Timer 1 Overflow Interrupt: Off
; 0000 0065 // Input Capture Interrupt: Off
; 0000 0066 // Compare A Match Interrupt: Off
; 0000 0067 // Compare B Match Interrupt: Off
; 0000 0068 TCCR1A=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0069 TCCR1B=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006A TCNT1H=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006B TCNT1L=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006C ICR1H=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 006D ICR1L=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006E OCR1AH=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006F OCR1AL=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0070 OCR1BH=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0071 OCR1BL=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0072 
; 0000 0073 // Timer/Counter 2 initialization
; 0000 0074 // Clock source: System Clock
; 0000 0075 // Clock value: 15.625 kHz
; 0000 0076 // Mode: CTC top=OCR2
; 0000 0077 // OC2 output: Disconnected
; 0000 0078 ASSR=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0079 TCCR2=0x0F;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007A TCNT2=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007B OCR2=0x64;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007C 
; 0000 007D // External Interrupt(s) initialization
; 0000 007E // INT0: Off
; 0000 007F // INT1: Off
; 0000 0080 // INT2: Off
; 0000 0081 MCUCR=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0082 MCUCSR=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0083 
; 0000 0084 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0085 TIMSK=0x82;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0086 
; 0000 0087 // Analog Comparator initialization
; 0000 0088 // Analog Comparator: Off
; 0000 0089 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 008A ACSR=0x80;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 008B SFIOR=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 008C 
; 0000 008D // Global enable interrupts
; 0000 008E #asm("sei")
;PCODE: $0000006F VOL: 0
	sei
;PCODE: $00000070 VOL: 0
; 0000 008F 
; 0000 0090 while (1)
;PCODE: $00000071 VOL: 0
; 0000 0091       {
; 0000 0092       // Place your code here
; 0000 0093 
; 0000 0094       };
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0095 }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
