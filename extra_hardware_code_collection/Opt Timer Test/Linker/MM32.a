;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.8a Evaluation
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/17/2009
;Author  : Freeware, for evaluation and non-commercial use only
;Company :
;Comments:
;
;
;Chip type           : ATmega32
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001D #endasm
;#include <lcd.h>
;#define ADC_DELAY 40
;#define TRUE 1
;#define FALSE 0
;#define SHOW_DISPLAY TRUE
;#define ACC_FACTOR 5
;#define SENSOR_TYPE 1
;unsigned char step[4]={0xCC,0x66,0x33,0x99};

	.DSEG
;unsigned char step_rev[4]={0x99,0x33,0x66,0xCC};
;unsigned char l_overflow,r_overflow,l_step,r_step,x,y,z;
;unsigned rightMotorOn;
;unsigned leftMotorOn;
;unsigned int left,right,center;
;int error,error0;
;
;unsigned char MOTOR_DELAY=150;
;unsigned char ADC_CENTER=105;
;
;
;void read(void);
;void show(unsigned int ,unsigned char , unsigned char );
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0035 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0036 // Place your code here
; 0000 0037 if(rightMotorOn)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0038 {
; 0000 0039 PORTB=step[r_step];
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 003A r_step++;
;PCODE: $00000019 VOL: 0
; 0000 003B if(r_step>3)r_step=0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003C }
;PCODE: $0000001E VOL: 0
; 0000 003D }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; // Timer 2 output compare interrupt service routine
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
; 0000 0040 {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0041 //Place your code here
; 0000 0042 if(leftMotorOn)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0043 {
; 0000 0044 PORTD=step[l_step];
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0045 PORTC.0=~PINC.0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0046 l_step++;
;PCODE: $00000037 VOL: 0
; 0000 0047 if(l_step>3)l_step=0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0048 }
;PCODE: $0000003C VOL: 0
; 0000 0049 }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;// Timer 1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 004C {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004D  // Place your code here
; 0000 004E    //read sensor
; 0000 004F    z++;
;PCODE: $00000043 VOL: 0
; 0000 0050    if(z>ADC_DELAY)
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0051    {
; 0000 0052    z=0;
;PCODE: $00000047 VOL: 0
; 0000 0053    read();
;PCODE: $00000048 VOL: 0
; 0000 0054    //error correction
; 0000 0055    error0=error;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0056    if(left < 5 )
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0057         {
; 0000 0058          error = ADC_CENTER-right;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0059         // ADC_CENTER=(ADC_CENTER+right)/2;
; 0000 005A         }
; 0000 005B    else if(right < 5)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005C         {
; 0000 005D          error = left-ADC_CENTER;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005E          //ADC_CENTER=(left+ADC_CENTER)/2;
; 0000 005F         }
; 0000 0060    else
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0061         {
; 0000 0062          error = left-right;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0063          //ADC_CENTER=(left+right)/2;
; 0000 0064         }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0065 
; 0000 0066 
; 0000 0067 
; 0000 0068    //if(error>0)
; 0000 0069    OCR2=MOTOR_DELAY-((error/16)+(error-error0)*2);
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 006A    //else if(error<0)
; 0000 006B 
; 0000 006C    OCR0=MOTOR_DELAY+((error/16)+(error-error0)*2);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 006D //
; 0000 006E //    if(error>0)r_overflow=MOTOR_DELAY+((error*r_overflow)/40);
; 0000 006F //   else if(error<0)l_overflow=MOTOR_DELAY-((error*l_overflow)/40);
; 0000 0070         if(SHOW_DISPLAY)
; 0000 0071         {
; 0000 0072 
; 0000 0073          //putchar(left);
; 0000 0074          //putchar(center);
; 0000 0075          //putchar(right);
; 0000 0076          //show(right,0,0);
; 0000 0077          //show(left,10,0);
; 0000 0078          //show(center,5,0);
; 0000 0079         }
; 0000 007A    }
;PCODE: $00000083 VOL: 0
; 0000 007B // Place your code here
; 0000 007C 
; 0000 007D }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0xE0
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0088 {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0089 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 008A // Delay needed for the stabilization of the ADC input voltage
; 0000 008B delay_us(10);
;PCODE: $0000008D VOL: 0
; 0000 008C // Start the AD conversion
; 0000 008D ADCSRA|=0x40;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 008E // Wait for the AD conversion to complete
; 0000 008F while ((ADCSRA & 0x10)==0);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0090 ADCSRA|=0x10;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0091 return ADCH;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0092 }
;PCODE: $0000009B VOL: 0
;
;void initialize(void)
; 0000 0095 {
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0096  x=0;
;PCODE: $0000009E VOL: 0
; 0000 0097  y=0;
;PCODE: $0000009F VOL: 0
; 0000 0098  z=0;
;PCODE: $000000A0 VOL: 0
; 0000 0099  l_step=0;
;PCODE: $000000A1 VOL: 0
; 0000 009A  r_step=0;
;PCODE: $000000A2 VOL: 0
; 0000 009B  l_overflow=MOTOR_DELAY;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 009C  r_overflow=MOTOR_DELAY;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 009D  rightMotorOn=1;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 009E  leftMotorOn=1;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 009F }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;
;void read(void)
; 0000 00A2 {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A3  unsigned char i,lo,co,ro;
; 0000 00A4  left=0;
;PCODE: $000000AF VOL: 0
;	i -> R17
;	lo -> R16
;	co -> R19
;	ro -> R18
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00A5  center=0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00A6  right=0;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00A7 
; 0000 00A8  lo=0;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00A9  co=0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00AA  ro=0;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00AB  //putchar(0xFF);
; 0000 00AC  if(SENSOR_TYPE==0)
;PCODE: $000000BC VOL: 0
; 0000 00AD  {
; 0000 00AE         lo=read_adc(3);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00AF         PORTA=PINA|(1<<0);
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B0         left=read_adc(3);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00B1         PORTA=PINA&(~(1<<0));
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00B2         left=left-lo;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B3         delay_us(7);
;PCODE: $000000D1 VOL: 0
; 0000 00B4 
; 0000 00B5         ro=read_adc(4);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00B6         PORTA=PINA|(1<<1);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00B7         right=read_adc(4);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00B8         PORTA=PINA&(~(1<<1));
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B9         right=right-ro;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00BA         delay_us(7);
;PCODE: $000000E6 VOL: 0
; 0000 00BB 
; 0000 00BC         co=read_adc(5);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00BD         PORTA=PINA|(1<<2);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00BE         center=read_adc(5);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00BF         PORTA=PINA&(~(1<<2));
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00C0         center=center-co;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00C1         delay_us(7);
;PCODE: $000000FB VOL: 0
; 0000 00C2  }
; 0000 00C3   if(SENSOR_TYPE==1)
;PCODE: $000000FC VOL: 0
; 0000 00C4   {
; 0000 00C5         left=read_adc(5);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00C6         center=read_adc(6);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00C7         right=read_adc(7);
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00C8   }
; 0000 00C9   if(SENSOR_TYPE==2)
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00CA   {
; 0000 00CB       co=read_adc(2);//front right
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00CC       right=read_adc(3);//right
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00CD       left=read_adc(4);//left
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00CE       center=(read_adc(5)+co)/2;//front left
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00CF   }
; 0000 00D0 }
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;
;void show(unsigned int val,unsigned char xx, unsigned char yy)
; 0000 00D3 {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00D4  unsigned char a,b,c;
; 0000 00D5  lcd_gotoxy(xx,yy);
;PCODE: $0000012C VOL: 0
;	val -> Y+6
;	xx -> Y+5
;	yy -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00D6  a=(val%10)+48;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00D7  val/=10;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00D8  b=(val%10)+48;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00D9  val/=10;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00DA  c=(val%10)+48;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00DB // val/=10;
; 0000 00DC // d=(val%10)+48;
; 0000 00DD // lcd_putchar(d);
; 0000 00DE  lcd_putchar(c);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00DF  lcd_putchar(b);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00E0  lcd_putchar(a);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00E1 
; 0000 00E2 }
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;
;void turnBack(void)
; 0000 00E5 {
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00E6     unsigned char i;
; 0000 00E7     rightMotorOn=0;
;PCODE: $00000155 VOL: 0
;	i -> R17
;PCODE: $00000156 VOL: 0
; 0000 00E8           leftMotorOn=0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00E9     delay_ms(10);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00EA     for(i=0;i<45;i++)//45 for fast    150 for slow
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00EB     {
; 0000 00EC 
; 0000 00ED     PORTB=step[r_step];
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00EE     r_step++;
;PCODE: $0000016A VOL: 0
; 0000 00EF     if(r_step>3)r_step=0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00F0 
; 0000 00F1     PORTD=step_rev[l_step];
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00F2     l_step++;
;PCODE: $00000175 VOL: 0
; 0000 00F3     if(l_step > 3)l_step = 0;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00F4 
; 0000 00F5         delay_ms(8);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00F6     }
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00F7     delay_ms(10);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00F8     rightMotorOn=1;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00F9     leftMotorOn=1;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00FA }
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;void turnRight(void)
; 0000 00FC {
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00FD         unsigned char i;
; 0000 00FE 
; 0000 00FF     rightMotorOn=0;
;PCODE: $0000018F VOL: 0
;	i -> R17
;PCODE: $00000190 VOL: 0
; 0000 0100           leftMotorOn=0;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0101 
; 0000 0102     for(i=0;i<75;i++)
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0103     {
; 0000 0104 
; 0000 0105     PORTB=step_rev[r_step];
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0106     r_step++;
;PCODE: $000001A1 VOL: 0
; 0000 0107     if(r_step>3)r_step=0;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0108 
; 0000 0109     PORTD=step[l_step];
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 010A     l_step++;
;PCODE: $000001AC VOL: 0
; 0000 010B     if(l_step > 3)l_step = 0;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 010C 
; 0000 010D         delay_ms(4);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 010E     }
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 010F     rightMotorOn=1;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0110     leftMotorOn=1;
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0111 }
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;
;void turnLeft(void)
; 0000 0114 {
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0115 
; 0000 0116     unsigned char i;
; 0000 0117     rightMotorOn=0;
;PCODE: $000001C3 VOL: 0
;	i -> R17
;PCODE: $000001C4 VOL: 0
; 0000 0118           leftMotorOn=0;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0119 
; 0000 011A 
; 0000 011B     for(i=0;i<75;i++)
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 011C     {
; 0000 011D 
; 0000 011E     PORTB=step[r_step];
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 011F     r_step++;
;PCODE: $000001D5 VOL: 0
; 0000 0120     if(r_step>3)r_step=0;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0121 
; 0000 0122     PORTD=step_rev[l_step];
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0123     l_step++;
;PCODE: $000001E0 VOL: 0
; 0000 0124     if(l_step > 3)l_step = 0;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0125 
; 0000 0126         delay_ms(4);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0127     }
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0128 
; 0000 0129     rightMotorOn=1;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 012A     leftMotorOn=1;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 012B 
; 0000 012C }
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;
;// Declare your global variables here
;// Declare your global variables here
;
;void main(void)
; 0000 0132 {
;PCODE: $000001F5 VOL: 0
; 0000 0133 // Declare your local variables here
; 0000 0134 
; 0000 0135 initialize();
;PCODE: $000001F6 VOL: 0
; 0000 0136 
; 0000 0137 // Input/Output Ports initialization
; 0000 0138 // Port A initialization
; 0000 0139 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 013A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 013B PORTA=0x00;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 013C DDRA=0x00;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 013D 
; 0000 013E // Port B initialization
; 0000 013F // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0140 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 0141 PORTB=0x00;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0142 DDRB=0x0F;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0143 
; 0000 0144 // Port C initialization
; 0000 0145 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=Out Func1=Out Func0=Out
; 0000 0146 // State7=T State6=T State5=T State4=T State3=T State2=1 State1=1 State0=1
; 0000 0147 PORTC=0xFF;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0148 DDRC=0xFF;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0149 
; 0000 014A // Port D initialization
; 0000 014B // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 014C // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 014D PORTD=0x00;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 014E DDRD=0xF0;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 014F 
; 0000 0150 // Timer/Counter 0 initialization
; 0000 0151 // Clock source: System Clock
; 0000 0152 // Clock value: 15.625 kHz
; 0000 0153 // Mode: CTC top=OCR0
; 0000 0154 // OC0 output: Disconnected
; 0000 0155 TCCR0=0x0D;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0156 TCNT0=0x00;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0157 OCR0=150;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0158 
; 0000 0159 
; 0000 015A // Timer/Counter 1 initialization
; 0000 015B // Clock source: System Clock
; 0000 015C // Clock value: 15.625 kHz
; 0000 015D // Mode: CTC top=OCR1A
; 0000 015E // OC1A output: Discon.
; 0000 015F // OC1B output: Discon.
; 0000 0160 // Noise Canceler: Off
; 0000 0161 // Input Capture on Falling Edge
; 0000 0162 // Timer 1 Overflow Interrupt: Off
; 0000 0163 // Input Capture Interrupt: Off
; 0000 0164 // Compare A Match Interrupt: On
; 0000 0165 // Compare B Match Interrupt: Off
; 0000 0166 TCCR1A=0x00;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0167 TCCR1B=0x0D;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0168 TCNT1H=0x00;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0169 TCNT1L=0x00;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 016A ICR1H=0x00;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 016B ICR1L=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 016C OCR1AH=0x00;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 016D OCR1AL=0xFF;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 016E OCR1BH=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 016F OCR1BL=0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0170 
; 0000 0171 // Timer/Counter 2 initialization
; 0000 0172 // Clock source: System Clock
; 0000 0173 // Clock value: Timer 2 Stopped
; 0000 0174 // Mode: CTC top=OCR2
; 0000 0175 // OC2 output: Disconnected
; 0000 0176 ASSR=0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0177 TCCR2=0x0F;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0178 TCNT2=0x00;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0179 OCR2=150;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 017A 
; 0000 017B // External Interrupt(s) initialization
; 0000 017C // INT0: Off
; 0000 017D // INT1: Off
; 0000 017E // INT2: Off
; 0000 017F MCUCR=0x00;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0180 MCUCSR=0x00;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0181 
; 0000 0182 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0183 TIMSK=0x92;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0184 
; 0000 0185 // Analog Comparator initialization
; 0000 0186 // Analog Comparator: Off
; 0000 0187 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0188 ACSR=0x80;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0189 SFIOR=0x00;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 018A 
; 0000 018B // ADC initialization
; 0000 018C // ADC Clock frequency: 125.000 kHz
; 0000 018D // ADC Voltage Reference: Int., cap. on AREF
; 0000 018E // Only the 8 most significant bits of
; 0000 018F // the AD conversion result are used
; 0000 0190 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0191 ADCSRA=0x87;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0192 
; 0000 0193 // LCD module initialization
; 0000 0194 lcd_init(16);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0195 
; 0000 0196 // Global enable interrupts
; 0000 0197 #asm("sei")
;PCODE: $0000023A VOL: 0
	sei
;PCODE: $0000023B VOL: 0
; 0000 0198 PORTC = 0xFF;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0199 while (1)
;PCODE: $0000023E VOL: 0
; 0000 019A       {
; 0000 019B       // Place your code here
; 0000 019C         if(center>30)
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 019D          {
; 0000 019E           //turnRight();
; 0000 019F           //turnRight();
; 0000 01A0           turnBack();
;PCODE: $00000242 VOL: 0
; 0000 01A1            //rightMotorOn=0;
; 0000 01A2            //leftMotorOn=0;
; 0000 01A3          }
; 0000 01A4       };
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 01A5 }
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
