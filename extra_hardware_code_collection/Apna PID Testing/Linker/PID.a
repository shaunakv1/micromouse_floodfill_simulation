;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.8a Evaluation
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/8/2008
;Author  : Freeware, for evaluation and non-commercial use only
;Company :
;Comments:
;
;
;Chip type           : ATmega16
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001D #endasm
;#include <lcd.h>
;#define MOTOR_DELAY 40
;#define ADC_DELAY 40
;
;unsigned char step[4]={0xCC,0x66,0x33,0x99};

	.DSEG
;unsigned char l_overflow,r_overflow,l_step,r_step,x,y,z;
;unsigned rightMotorOn;
;unsigned leftMotorOn;
;unsigned int left,right,center,error;
;
;void read(void);
;void show(unsigned int ,unsigned char , unsigned char );
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002D {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002E // Place your code here
; 0000 002F  //right motor
; 0000 0030    y++;
;PCODE: $00000012 VOL: 0
; 0000 0031    if(y>r_overflow && rightMotorOn)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0032    {
; 0000 0033     y=0;
;PCODE: $0000001C VOL: 0
; 0000 0034     PORTD=step[r_step];
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0035     r_step++;
;PCODE: $00000022 VOL: 0
; 0000 0036     if(r_step>3)r_step=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0037    }
;PCODE: $00000027 VOL: 0
; 0000 0038 
; 0000 0039    //left motor
; 0000 003A    x++;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003B    if(x>l_overflow && leftMotorOn)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003C    {
; 0000 003D     x=0;
;PCODE: $00000034 VOL: 0
; 0000 003E     PORTB=step[l_step];
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003F     l_step++;
;PCODE: $0000003A VOL: 0
; 0000 0040     if(l_step > 3)l_step = 0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0041    }
;PCODE: $0000003F VOL: 0
; 0000 0042 
; 0000 0043 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;// Timer 2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0047 {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0048 // Place your code here
; 0000 0049 //z++;
; 0000 004A //   if(z>ADC_DELAY)
; 0000 004B //   {
; 0000 004C    //read sensor
; 0000 004D //   read();
; 0000 004E    //error correction
; 0000 004F //   error=(left-right);
; 0000 0050 //   if(error>0)r_overflow=MOTOR_DELAY+error;
; 0000 0051 //   else l_overflow=MOTOR_DELAY-error;
; 0000 0052 //   show(left,0,0);
; 0000 0053 //   show(right,10,0);
; 0000 0054 //   show(center,5,0);
; 0000 0055 //
; 0000 0056 //   }
; 0000 0057 
; 0000 0058 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; void initialize(void)
; 0000 005A {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005B  x=0;
;PCODE: $0000004B VOL: 0
; 0000 005C  y=0;
;PCODE: $0000004C VOL: 0
; 0000 005D  z=0;
;PCODE: $0000004D VOL: 0
; 0000 005E  l_step=0;
;PCODE: $0000004E VOL: 0
; 0000 005F  r_step=0;
;PCODE: $0000004F VOL: 0
; 0000 0060  l_overflow=MOTOR_DELAY;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0061  r_overflow=MOTOR_DELAY;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0062  rightMotorOn=1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0063  leftMotorOn=1;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0064 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0xE0
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 006D {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 006E ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 006F // Delay needed for the stabilization of the ADC input voltage
; 0000 0070 delay_us(10);
;PCODE: $0000005F VOL: 0
; 0000 0071 // Start the AD conversion
; 0000 0072 ADCSRA|=0x40;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0073 // Wait for the AD conversion to complete
; 0000 0074 while ((ADCSRA & 0x10)==0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0075 ADCSRA|=0x10;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0076 return ADCH;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0077 }
;PCODE: $0000006D VOL: 0
;
;void read(void)
; 0000 007A {
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007B  unsigned char i;
; 0000 007C  left=0;
;PCODE: $00000070 VOL: 0
;	i -> R17
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 007D  center=0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007E  right=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 007F  for(i=0;i<8;i++)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0080  {
; 0000 0081  PORTA=PINA|(1<<0);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0082  right+=read_adc(3);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0083  PORTA=PINA&(~(1<<0));
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0084  delay_us(7);
;PCODE: $0000008D VOL: 0
; 0000 0085  }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0086 for(i=0;i<8;i++)
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0087  {
; 0000 0088  PORTA=PINA|(1<<1);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0089  left+=read_adc(4);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 008A  PORTA=PINA&(~(1<<1));
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 008B  delay_us(7);
;PCODE: $000000A9 VOL: 0
; 0000 008C  }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 008D for(i=0;i<8;i++)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 008E  {
; 0000 008F  PORTA=PINA|(1<<2);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0090  center+=read_adc(5);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0091  PORTA=PINA&(~(1<<2));
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0092  delay_us(7);
;PCODE: $000000C5 VOL: 0
; 0000 0093  }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0094 left/=8;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0095 right/=8;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0096 center/=8;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0097 }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;
;void show(unsigned int val,unsigned char xx, unsigned char yy)
; 0000 009A {
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 009B  unsigned char a,b,c;
; 0000 009C  lcd_gotoxy(xx,yy);
;PCODE: $000000D9 VOL: 0
;	val -> Y+6
;	xx -> Y+5
;	yy -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 009D  a=(val%10)+48;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 009E  val/=10;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 009F  b=(val%10)+48;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00A0  val/=10;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00A1  c=(val%10)+48;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00A2 // val/=10;
; 0000 00A3 // d=(val%10)+48;
; 0000 00A4 // lcd_putchar(d);
; 0000 00A5  lcd_putchar(c);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00A6  lcd_putchar(b);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00A7  lcd_putchar(a);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00A8 
; 0000 00A9 }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00AE {
;PCODE: $00000100 VOL: 0
; 0000 00AF // Declare your local variables here
; 0000 00B0 
; 0000 00B1 // Input/Output Ports initialization
; 0000 00B2 // Port A initialization
; 0000 00B3 // Func7=In Func6=In Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0000 00B4 // State7=T State6=T State5=0 State4=0 State3=0 State2=T State1=T State0=T
; 0000 00B5 PORTA=0x00;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00B6 DDRA=0x38;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00B7 
; 0000 00B8 // Port B initialization
; 0000 00B9 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00BA // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 00BB PORTB=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00BC DDRB=0x0F;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00BD 
; 0000 00BE // Port C initialization
; 0000 00BF // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00C0 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00C1 PORTC=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00C2 DDRC=0x00;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00C3 
; 0000 00C4 // Port D initialization
; 0000 00C5 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 00C6 // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 00C7 PORTD=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00C8 DDRD=0xF0;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00C9 
; 0000 00CA initialize();
;PCODE: $00000111 VOL: 0
; 0000 00CB 
; 0000 00CC // Timer/Counter 0 initialization
; 0000 00CD // Clock source: System Clock
; 0000 00CE // Clock value: 2000.000 kHz
; 0000 00CF // Mode: Normal top=FFh
; 0000 00D0 // OC0 output: Disconnected
; 0000 00D1 TCCR0=0x02;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00D2 TCNT0=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00D3 OCR0=0x00;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00D4 
; 0000 00D5 // Timer/Counter 1 initialization
; 0000 00D6 // Clock source: System Clock
; 0000 00D7 // Clock value: Timer 1 Stopped
; 0000 00D8 // Mode: Normal top=FFFFh
; 0000 00D9 // OC1A output: Discon.
; 0000 00DA // OC1B output: Discon.
; 0000 00DB // Noise Canceler: Off
; 0000 00DC // Input Capture on Falling Edge
; 0000 00DD // Timer 1 Overflow Interrupt: Off
; 0000 00DE // Input Capture Interrupt: Off
; 0000 00DF // Compare A Match Interrupt: Off
; 0000 00E0 // Compare B Match Interrupt: Off
; 0000 00E1 TCCR1A=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00E2 TCCR1B=0x00;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00E3 TCNT1H=0x00;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00E4 TCNT1L=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00E5 ICR1H=0x00;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00E6 ICR1L=0x00;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00E7 OCR1AH=0x00;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00E8 OCR1AL=0x00;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00E9 OCR1BH=0x00;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00EA OCR1BL=0x00;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00EB 
; 0000 00EC // Timer/Counter 2 initialization
; 0000 00ED // Clock source: System Clock
; 0000 00EE // Clock value: 2000.000 kHz
; 0000 00EF // Mode: Normal top=FFh
; 0000 00F0 // OC2 output: Disconnected
; 0000 00F1 ASSR=0x00;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00F2 TCCR2=0x02;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00F3 TCNT2=0x00;
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00F4 OCR2=0x00;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00F5 
; 0000 00F6 // External Interrupt(s) initialization
; 0000 00F7 // INT0: Off
; 0000 00F8 // INT1: Off
; 0000 00F9 // INT2: Off
; 0000 00FA MCUCR=0x00;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00FB MCUCSR=0x00;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00FC 
; 0000 00FD // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00FE TIMSK=0x41;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00FF 
; 0000 0100 // Analog Comparator initialization
; 0000 0101 // Analog Comparator: Off
; 0000 0102 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0103 ACSR=0x80;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0104 SFIOR=0x00;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0105 
; 0000 0106 // ADC initialization
; 0000 0107 // ADC Clock frequency: 250.000 kHz
; 0000 0108 // ADC Voltage Reference: Int., cap. on AREF
; 0000 0109 // ADC Auto Trigger Source: None
; 0000 010A // Only the 8 most significant bits of
; 0000 010B // the AD conversion result are used
; 0000 010C ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 010D ADCSRA=0x86;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 010E 
; 0000 010F // LCD module initialization
; 0000 0110 lcd_init(16);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0111 
; 0000 0112 // Global enable interrupts
; 0000 0113 #asm("sei")
;PCODE: $00000145 VOL: 0
	sei
;PCODE: $00000146 VOL: 0
; 0000 0114 
; 0000 0115 while (1)
;PCODE: $00000147 VOL: 0
; 0000 0116       {
; 0000 0117       // Place your code here
; 0000 0118         //read sensor
; 0000 0119    read();
;PCODE: $00000148 VOL: 0
; 0000 011A    //error correction
; 0000 011B    error=(left-right);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 011C    if(error>0)r_overflow=MOTOR_DELAY+error;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 011D    else l_overflow=MOTOR_DELAY-error;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 011E    show(left,0,0);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 011F    show(right,10,0);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0120    show(center,5,0);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0121 
; 0000 0122       };
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0123 }
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
