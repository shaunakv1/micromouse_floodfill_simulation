;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.8a Evaluation
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/3/2008
;Author  : Freeware, for evaluation and non-commercial use only
;Company :
;Comments:
;
;
;Chip type           : ATmega16
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001D #endasm
;#include <lcd.h>
;unsigned char step[4]={0xCC,0x66,0x33,0x99};

	.DSEG
;unsigned char l_overflow,r_overflow,l_step,r_step,x,y;
;unsigned rightMotorOn;
;unsigned leftMotorOn;
;unsigned char BASE_SPEED=60;
;// Timer 0 overflow interrupt service routine
;//right motor Timer
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0027 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0028     //Place your code here
; 0000 0029    y++;
;PCODE: $00000012 VOL: 0
; 0000 002A if(y>r_overflow && rightMotorOn)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002B   {
; 0000 002C    y=0;
;PCODE: $0000001C VOL: 0
; 0000 002D    PORTD=step[r_step];
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002E    r_step++;
;PCODE: $00000022 VOL: 0
; 0000 002F    if(r_step>3)r_step=0;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0030   }
;PCODE: $00000027 VOL: 0
; 0000 0031 
; 0000 0032 
; 0000 0033 }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;// Timer 2 overflow interrupt service routine
;//left motor timer
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0038 {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0039 
; 0000 003A x++;
;PCODE: $0000002E VOL: 0
; 0000 003B if(x>l_overflow && leftMotorOn)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003C   {
; 0000 003D    x=0;
;PCODE: $00000038 VOL: 0
; 0000 003E    PORTB=step[l_step];
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003F    l_step++;
;PCODE: $0000003E VOL: 0
; 0000 0040    if(l_step > 3)l_step = 0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0041   }
;PCODE: $00000043 VOL: 0
; 0000 0042 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;void initialize(void)
; 0000 0044 {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0045  x=0;
;PCODE: $0000004A VOL: 0
; 0000 0046  y=0;
;PCODE: $0000004B VOL: 0
; 0000 0047  l_step=0;
;PCODE: $0000004C VOL: 0
; 0000 0048  r_step=0;
;PCODE: $0000004D VOL: 0
; 0000 0049  l_overflow=BASE_SPEED;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004A  r_overflow=BASE_SPEED;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004B  rightMotorOn=1;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 004C  leftMotorOn=1;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004D }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;
;
;#define ADC_VREF_TYPE 0xE0
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0055 {
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0056 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0057 // Delay needed for the stabilization of the ADC input voltage
; 0000 0058 delay_us(10);
;PCODE: $0000005D VOL: 0
; 0000 0059 // Start the AD conversion
; 0000 005A ADCSRA|=0x40;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 005B // Wait for the AD conversion to complete
; 0000 005C while ((ADCSRA & 0x10)==0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 005D ADCSRA|=0x10;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005E return ADCH;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005F }
;PCODE: $0000006B VOL: 0
;
;// Declare your global variables here
;void displayNumberOnLCD(int x,int y,int cen)
; 0000 0063 {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0064       unsigned char a,b,c;
; 0000 0065       lcd_gotoxy(x,y);
;PCODE: $0000006E VOL: 0
;	x -> Y+8
;	y -> Y+6
;	cen -> Y+4
;	a -> R17
;	b -> R16
;	c -> R19
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0066       a=(cen%10)+48;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0067       cen/=10;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0068       b=(cen%10)+48;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0069       cen/=10;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 006A       c=(cen%10)+48;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 006B       lcd_putchar(c);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 006C       lcd_putchar(b);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 006D       lcd_putchar(a);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 006E }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;void main(void)
; 0000 0070 {
;PCODE: $00000095 VOL: 0
; 0000 0071 // Declare your local variables here
; 0000 0072 unsigned char cOff,cOn,cDiff,rOff,rOn,rDiff,lOff,lOn,lDiff;
; 0000 0073 unsigned char error,aerror;
; 0000 0074 // Input/Output Ports initialization
; 0000 0075 // Port A initialization
; 0000 0076 // Func7=In Func6=In Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0000 0077 // State7=T State6=T State5=0 State4=0 State3=0 State2=T State1=T State0=T
; 0000 0078 PORTA=0x00;
;PCODE: $00000096 VOL: 0
;	cOff -> R17
;	cOn -> R16
;	cDiff -> R19
;	rOff -> R18
;	rOn -> R21
;	rDiff -> R20
;	lOff -> Y+4
;	lOn -> Y+3
;	lDiff -> Y+2
;	error -> Y+1
;	aerror -> Y+0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0079 DDRA=0x38;// for our sensors
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 007A //DDRA=0x07;
; 0000 007B 
; 0000 007C // Port B initialization
; 0000 007D // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 007E // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 007F PORTB=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0080 DDRB=0x0F;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0081 
; 0000 0082 // Port C initialization
; 0000 0083 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0084 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0085 PORTC=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0086 DDRC=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0087 
; 0000 0088 // Port D initialization
; 0000 0089 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 008A // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 008B PORTD=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 008C DDRD=0xF0;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 008D 
; 0000 008E // Timer/Counter 0 initialization
; 0000 008F // Clock source: System Clock
; 0000 0090 // Clock value: 2000.000 kHz
; 0000 0091 // Mode: Normal top=FFh
; 0000 0092 // OC0 output: Disconnected
; 0000 0093 TCCR0=0x02;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0094 TCNT0=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0095 OCR0=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0096 
; 0000 0097 // Timer/Counter 1 initialization
; 0000 0098 // Clock source: System Clock
; 0000 0099 // Clock value: Timer 1 Stopped
; 0000 009A // Mode: Normal top=FFFFh
; 0000 009B // OC1A output: Discon.
; 0000 009C // OC1B output: Discon.
; 0000 009D // Noise Canceler: Off
; 0000 009E // Input Capture on Falling Edge
; 0000 009F // Timer 1 Overflow Interrupt: Off
; 0000 00A0 // Input Capture Interrupt: Off
; 0000 00A1 // Compare A Match Interrupt: Off
; 0000 00A2 // Compare B Match Interrupt: Off
; 0000 00A3 TCCR1A=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00A4 TCCR1B=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00A5 TCNT1H=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00A6 TCNT1L=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00A7 ICR1H=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00A8 ICR1L=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00A9 OCR1AH=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00AA OCR1AL=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00AB OCR1BH=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00AC OCR1BL=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00AD 
; 0000 00AE // Timer/Counter 2 initialization
; 0000 00AF // Clock source: System Clock
; 0000 00B0 // Clock value: 2000.000 kHz
; 0000 00B1 // Mode: Normal top=FFh
; 0000 00B2 // OC2 output: Disconnected
; 0000 00B3 ASSR=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00B4 TCCR2=0x02;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00B5 TCNT2=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00B6 OCR2=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00B7 
; 0000 00B8 // External Interrupt(s) initialization
; 0000 00B9 // INT0: Off
; 0000 00BA // INT1: Off
; 0000 00BB // INT2: Off
; 0000 00BC MCUCR=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00BD MCUCSR=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00BE 
; 0000 00BF // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00C0 TIMSK=0x41;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00C1 
; 0000 00C2 // Analog Comparator initialization
; 0000 00C3 // Analog Comparator: Off
; 0000 00C4 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00C5 ACSR=0x80;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00C6 SFIOR=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00C7 
; 0000 00C8 // ADC initialization
; 0000 00C9 // ADC Clock frequency: 250.000 kHz
; 0000 00CA // ADC Voltage Reference: AVCC pin
; 0000 00CB // ADC Auto Trigger Source: None
; 0000 00CC // Only the 8 most significant bits of
; 0000 00CD // the AD conversion result are used
; 0000 00CE ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00CF ADCSRA=0x86;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00D0 
; 0000 00D1 // LCD module initialization
; 0000 00D2 lcd_init(16);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00D3 
; 0000 00D4 // Global enable interrupts
; 0000 00D5 #asm("sei")
;PCODE: $000000DA VOL: 0
	sei
;PCODE: $000000DB VOL: 0
; 0000 00D6   initialize();
;PCODE: $000000DC VOL: 0
; 0000 00D7 while (1)
;PCODE: $000000DD VOL: 0
; 0000 00D8       {
; 0000 00D9       // Place your code here
; 0000 00DA       //PORTA=PINA|0x07;//Light Leds PORTA|=0x38
; 0000 00DB       //PORTA|=0x08;
; 0000 00DC       //delay_us(10);
; 0000 00DD       //rOn=read_adc(0);
; 0000 00DE //      PORTA&=0xF7;
; 0000 00DF //      PORTA|=0x10;
; 0000 00E0 //      delay_us(10);
; 0000 00E1 //      lOn=read_adc(2);
; 0000 00E2 //      PORTA&=0xEF;
; 0000 00E3 //      PORTA|=0x02;
; 0000 00E4 //      delay_us(10);
; 0000 00E5 //      cOn=read_adc(3);
; 0000 00E6       //PORTA&=0xF7;
; 0000 00E7       //PORTA=PINA&0xf8;//off Leds    PORTA&=0xc7;
; 0000 00E8       //delay_us(5);
; 0000 00E9       //aerror= read_adc(3)-read_adc(4);
; 0000 00EA       //delay_us(5);
; 0000 00EB       //error=(lOn-rOn);//-aerror;
; 0000 00EC       //if(error>0)
; 0000 00ED       //{
; 0000 00EE        // r_overflow=BASE_SPEED+error;
; 0000 00EF 
; 0000 00F0 
; 0000 00F1       //}
; 0000 00F2       //else l_overflow=BASE_SPEED-error;
; 0000 00F3 
; 0000 00F4       /*delay_ms(20);
; 0000 00F5       rOff=read_adc(0);
; 0000 00F6       cOff=read_adc(1);
; 0000 00F7       lOff=read_adc(2);
; 0000 00F8 
; 0000 00F9       rDiff=rOn-rOff;
; 0000 00FA       cDiff=cOn-cOff;
; 0000 00FB       lDiff=lOn-lOff;
; 0000 00FC 
; 0000 00FD       displayNumberOnLCD(0,0,rDiff);
; 0000 00FE       displayNumberOnLCD(5,0,cDiff);
; 0000 00FF       displayNumberOnLCD(10,0,lDiff);*/
; 0000 0100 
; 0000 0101       //displayNumberOnLCD(0,0,rOn);
; 0000 0102       //displayNumberOnLCD(5,0,cOn);
; 0000 0103       //displayNumberOnLCD(10,0,lOn);
; 0000 0104 
; 0000 0105 //      if(cOn>230)
; 0000 0106 //        {
; 0000 0107 //             rightMotorOn=0;
; 0000 0108 //             leftMotorOn=0;
; 0000 0109 //        }
; 0000 010A       };
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 010B }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
