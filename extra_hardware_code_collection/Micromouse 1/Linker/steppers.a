;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.8a Evaluation
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12/3/2008
;Author  : Freeware, for evaluation and non-commercial use only
;Company :
;Comments:
;
;
;Chip type           : ATmega16
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001D #endasm
;#include <lcd.h>
;#include <delay.h>
;unsigned char step[4]={0xCC,0x66,0x33,0x99};

	.DSEG
;unsigned char l_overflow,r_overflow,l_step,r_step,x,y;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0024 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0025 // Place your code here
; 0000 0026 x++;
;PCODE: $00000012 VOL: 0
; 0000 0027 if(x>l_overflow)
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0028   {
; 0000 0029    x=0;
;PCODE: $00000016 VOL: 0
; 0000 002A    PORTB=step[l_step];
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 002B    l_step++;
;PCODE: $0000001C VOL: 0
; 0000 002C    if(l_step > 3)l_step = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002D   }
;PCODE: $00000021 VOL: 0
; 0000 002E }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;// Timer 2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 0032 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0033 // Place your code here
; 0000 0034 y++;
;PCODE: $00000028 VOL: 0
; 0000 0035 if(y>r_overflow)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0036   {
; 0000 0037    y=0;
;PCODE: $0000002C VOL: 0
; 0000 0038    PORTD=step[r_step];
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0039    r_step++;
;PCODE: $00000032 VOL: 0
; 0000 003A    if(r_step>3)r_step=0;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003B   }
;PCODE: $00000037 VOL: 0
; 0000 003C }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;
;void initialize(void)
; 0000 003F {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0040  x=0;
;PCODE: $0000003E VOL: 0
; 0000 0041  y=0;
;PCODE: $0000003F VOL: 0
; 0000 0042  l_step=0;
;PCODE: $00000040 VOL: 0
; 0000 0043  r_step=0;
;PCODE: $00000041 VOL: 0
; 0000 0044  l_overflow=40;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0045  r_overflow=40;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0046 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;// Declare your global variables here
;
;void main(void)
; 0000 004A {
;PCODE: $00000048 VOL: 0
; 0000 004B // Declare your local variables here
; 0000 004C 
; 0000 004D // Input/Output Ports initialization
; 0000 004E // Port A initialization
; 0000 004F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0050 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0051 PORTA=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0052 DDRA=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0053 
; 0000 0054 // Port B initialization
; 0000 0055 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0056 // State7=T State6=T State5=T State4=T State3=0 State2=0 State1=0 State0=0
; 0000 0057 PORTB=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0058 DDRB=0x0F;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0059 
; 0000 005A // Port C initialization
; 0000 005B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005D PORTC=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 005E DDRC=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 005F 
; 0000 0060 // Port D initialization
; 0000 0061 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0062 // State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 0063 PORTD=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0064 DDRD=0xF0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0065 
; 0000 0066 // Timer/Counter 0 initialization
; 0000 0067 // Clock source: System Clock
; 0000 0068 // Clock value: 250.000 kHz
; 0000 0069 // Mode: Normal top=FFh
; 0000 006A // OC0 output: Disconnected
; 0000 006B TCCR0=0x02;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 006C TCNT0=0x00;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 006D OCR0=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 006E 
; 0000 006F // Timer/Counter 1 initialization
; 0000 0070 // Clock source: System Clock
; 0000 0071 // Clock value: Timer 1 Stopped
; 0000 0072 // Mode: Normal top=FFFFh
; 0000 0073 // OC1A output: Discon.
; 0000 0074 // OC1B output: Discon.
; 0000 0075 // Noise Canceler: Off
; 0000 0076 // Input Capture on Falling Edge
; 0000 0077 // Timer 1 Overflow Interrupt: Off
; 0000 0078 // Input Capture Interrupt: Off
; 0000 0079 // Compare A Match Interrupt: Off
; 0000 007A // Compare B Match Interrupt: Off
; 0000 007B TCCR1A=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 007C TCCR1B=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 007D TCNT1H=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007E TCNT1L=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 007F ICR1H=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0080 ICR1L=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0081 OCR1AH=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0082 OCR1AL=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0083 OCR1BH=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0084 OCR1BL=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0085 
; 0000 0086 // Timer/Counter 2 initialization
; 0000 0087 // Clock source: System Clock
; 0000 0088 // Clock value: 250.000 kHz
; 0000 0089 // Mode: Normal top=FFh
; 0000 008A // OC2 output: Disconnected
; 0000 008B ASSR=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 008C TCCR2=0x02;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 008D TCNT2=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 008E OCR2=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 008F 
; 0000 0090 // External Interrupt(s) initialization
; 0000 0091 // INT0: Off
; 0000 0092 // INT1: Off
; 0000 0093 // INT2: Off
; 0000 0094 MCUCR=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0095 MCUCSR=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0096 
; 0000 0097 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0098 TIMSK=0x41;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0099 
; 0000 009A // Analog Comparator initialization
; 0000 009B // Analog Comparator: Off
; 0000 009C // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 009D ACSR=0x80;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 009E SFIOR=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 009F 
; 0000 00A0 // LCD module initialization
; 0000 00A1 lcd_init(16);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A2 
; 0000 00A3 // Global enable interrupts
; 0000 00A4 #asm("sei")
;PCODE: $00000088 VOL: 0
	sei
;PCODE: $00000089 VOL: 0
; 0000 00A5 initialize();
;PCODE: $0000008A VOL: 0
; 0000 00A6 while (1)
;PCODE: $0000008B VOL: 0
; 0000 00A7       {
; 0000 00A8       // Place your code here
; 0000 00A9       if(l_overflow>12)l_overflow--;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00AA       if(r_overflow>12)r_overflow--;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00AB       delay_ms(50);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00AC       };
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00AD }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
